package com.knudsvig.centchallenge.service;

import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.knudsvig.centchallenge.dao.EnrolleeDao;
import com.knudsvig.centchallenge.entity.Dependent;
import com.knudsvig.centchallenge.entity.Enrollee;

@Service
//! Service acting as a middleman between controller and EnrolleeDao
public class EnrolleeService {

	@Autowired
	//! The Data Access Object for Enrollees
	private EnrolleeDao enDao;
	
	@Autowired
	//! Dependent's Service
	private DependentService depService;
	
	/*
		\operation to Create and add an Enrollee to the EnrolleeDao, given basic information *(no phone number)*
		\param name - The name of the Enrollee we wish to create
		\param activationStatus - The activation status of the Enrollee
		\param birthDate - The birth date of the Enrollee we wish to create
		\param dependents - The dependents of the Enrollee we wish to create
		\return newly created Enrollee in EnrolleeDao
	*/
	public Enrollee addEnrollee(String name, boolean activationStatus, Date birthDate, Dependent... dependents) {
		return addEnrollee(name, activationStatus, birthDate, "Not Given", dependents);
	}
	
	/*
		\operation to Create and add an Enrollee to the EnrolleeDao, given all information
		\param name - The name of the Enrollee we wish to create
		\param activationStatus - The activation status of the Enrollee
		\param birthDate - The birth date of the Enrollee we wish to create
		\param phoneNumber - The phone number of the Enrollee we wish to create
		\param dependents - The dependents of the Enrollee we wish to create
		\return newly created Enrollee in EnrolleeDao
	*/
	public Enrollee addEnrollee(String name, boolean activationStatus, Date birthDate, String phoneNumber, Dependent... dependents) {
		Enrollee enrollee = new Enrollee();
		
		// set the data
		enrollee.setId(null);
		enrollee.setName(name);
		enrollee.setActivationStatus(activationStatus);
		enrollee.setBirthDate(birthDate);
		enrollee.setPhoneNumber(phoneNumber);
		enrollee.setDependents(new HashSet<Dependent>(Arrays.asList(dependents)));
		
		return addEnrollee(enrollee);
	}
	
	/*
		\operation to Add an Enrollee to the EnrolleeDao, given an Enrollee object with a name and birth date
		\param enrollee - The Enrollee to add
		\return The Enrollee added to EnrolleeDao, or null if there was mising information
	 */
	public Enrollee addEnrollee(Enrollee enrollee) {
		// Enrollees must have an id, name, activation status, and birth date
		// 		-id is generated by the database
		//		-activate status is a primitive, and so will always be a valid value of true or false
		//		-therefore we just check for name and birth date
		if((enrollee.getName() != null) &&
			(enrollee.getBirthDate() != null))
			return enDao.insert(enrollee);
		return null;
	}
	
	/*
		\operation to Update an Enrollee in the EnrolleeDao, given an Enrollee object with a valid id, name, and birth date
		\param enrollee - The Enrollee to add
		\return True if the update was successful, false otherwise
	 */
	public boolean updateEnrollee(Enrollee enrollee) {
		if((enrollee.getId() != null) &&
			(enrollee.getName() != null) &&
			(enrollee.getBirthDate() != null) &&
			(enDao.existsById(enrollee.getId())))
			return enDao.save(enrollee) != null;
		return false;
	}
	
	/*
		\operation to Delete the Enrollee with the given id from EnrolleeDao, including their Dependents
		\param id - The id of the Enrollee to delete
		\return True if an Enrollee of the given id existed, false otherwise
	 */
	public boolean deleteEnrollee(String id) {
		Enrollee enrollee = getEnrollee(id);
		if(enrollee != null) {
			for(Dependent dep : enrollee.getDependents())
				depService.deleteDependent(dep.getId());
			enDao.deleteById(id);
			return true;
		}
		return false;
	}
	
	/*
		\operation to Get an Enrollee from EnrolleeDao with an id
		\param id - The id of the Enrollee we wish to get
		\return The Enrollee in EnrolleeDao, or null if it doesn't exist
	*/
	public Enrollee getEnrollee(String id) {
		Optional<Enrollee> result = enDao.findById(id);
		if(result.isPresent()) {
			if(result.get().getDependents() != null)
				result.get().getDependents().removeIf(dependent -> dependent == null);
			return result.get();
		}
		return null;
	}
	
	/*
		\operation to Add a Dependent to an Enrollee in the database via EnrolleeDao and DependentService
		\param enrollId - The id of the Enrollee to add the Dependent to
		\param depId - The id of the Dependent to add to the Enrollee
		\return True if the addition was successful, false otherwise
	 */
	public boolean addEnrolleeDependent(String enId, String depId) {
		Enrollee enrollee = getEnrollee(enrollId);
		Dependent dependent = depService.getDependent(depId);
		if(enrollee != null && dependent != null) {
			enrollee.addDependent(dependent);
			return updateEnrollee(enrollee);
		}
		return false;
	}
	
	/*
		\operation to Remove a Dependent from an Enrollee in the database via EnrolleeDao
		\param enrollId - The id of the Enrollee to remove the Dependent from
		\param depId - The id of the Dependent to remove from the Enrollee
		\return True if the rmoval was successful, false otherwise
	 */
	public boolean deleteEnrolleeDependent(String enId, String depId) {
		Enrollee enrollee = getEnrollee(enrollId);
		if(enrollee != null) {
			if(enrollee.deleteDependentById(depId))
				return updateEnrollee(enrollee);
		}
		return false;
	}
}
